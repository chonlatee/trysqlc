// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: author.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAuthor = `-- name: GetAuthor :one
select id, name, bio, created_datetime, updated_datetime from authors where id = $1 limit 1
`

func (q *Queries) GetAuthor(ctx context.Context, id pgtype.UUID) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
	)
	return i, err
}

const insertAuthor = `-- name: InsertAuthor :one
insert into authors (
    id, name, bio, updated_datetime
) values ($1, $2, $3, now()) returning id, name, bio, created_datetime, updated_datetime
`

type InsertAuthorParams struct {
	ID   pgtype.UUID
	Name string
	Bio  pgtype.Text
}

func (q *Queries) InsertAuthor(ctx context.Context, arg InsertAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, insertAuthor, arg.ID, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
	)
	return i, err
}
